from ObsGenerator import Calcphases
import torch
import math
import numpy as np
import pandas as pd
from parameters import qn, q0, n, lmb, Dmax, Dmin


def PosToPhase(x, y, z):
    phasetup = ()
    distancetoref = torch.sqrt(((x - q0[0])**2 + (y - q0[1])**2 + (z - q0[2])**2))
    for j in range(n):
        distancetoantenna = torch.sqrt(((x - qn[j,0])**2 + (y - qn[j,1])**2 + (z - qn[j,2])**2))
        phasetup = phasetup + (((distancetoantenna - distancetoref) * 2*math.pi/lmb) % (2*math.pi),)
    return phasetup

    """
    JacobianTest was used to generate a Jacobian of the observation function "PosToPhase" for the model based approach.
    Loads in positions and phases from the CSV files generated by ObsGenerator.
    PosPick variable decides which point from GeneratedPositions to generate the Jacobian at.
    """

PositionsDF = pd.read_csv('GeneratedPositions.csv')
PhasesDF = pd.read_csv('GeneratedPhases.csv')
Positions = torch.tensor(PositionsDF.values, dtype=torch.float)
Phases = torch.tensor(PhasesDF.values, dtype=torch.float)

#Which point to generate Jacobian at
PosPick = 55

#Calculate jacobian and H matrix
inputstup = (Positions[PosPick][0], Positions[PosPick][1], Positions[PosPick][2])
jac = torch.tensor(torch.autograd.functional.jacobian(PosToPhase, inputstup))
jacT = torch.transpose(jac, 0, 1)
H = torch.matmul(torch.inverse(torch.matmul(jacT, jac)), jacT)
H = H.to(torch.float)

inputs = Positions[PosPick]
phases = torch.tensor(Calcphases(1, inputs))

print(torch.matmul(H, phases))






#for i in range(10):
#    noisedpos[i] = Positions[PosPick].numpy() + np.random.normal(0, 0.00, size=(1, 3))
#noised = torch.tensor(Calcphases(10, noisedpos)).to(torch.float)
#for i in range(len(noised)):
#    est = torch.matmul(H, noised[i])
#    print(est, noisedpos[i])
#    diffsqr = (Positions[PosPick] - est)**2
#    runningest += est
#    runningdiff += diffsqr



#diffsum = (torch.sum(runningdiff, dim=1)/3)/len(noised)
#print(diffsum)
#runningest /= len(noised)
#print(H)
#runningest = torch.zeros((1, 3))
#runningdiff = torch.zeros((1, 3))
#print(runningest)